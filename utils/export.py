import pandas as pd
import json
import io
import datetime
from typing import Dict, Any, List, Union

def export_to_csv(data_frame: pd.DataFrame) -> str:
    """
    Export data to CSV format.
    
    Args:
        data_frame: Pandas DataFrame to export
        
    Returns:
        CSV string
    """
    # Check if DataFrame is empty
    if data_frame.empty:
        return "No data to export"
    
    # Use StringIO to capture CSV output
    csv_buffer = io.StringIO()
    data_frame.to_csv(csv_buffer, index=False)
    
    return csv_buffer.getvalue()

def export_to_json(data: Union[Dict, List]) -> str:
    """
    Export data to JSON format.
    
    Args:
        data: Dictionary or list to export
        
    Returns:
        JSON string
    """
    # Handle empty data
    if not data:
        return json.dumps({"message": "No data to export"})
    
    # Custom JSON serializer to handle datetime objects
    class DateTimeEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, (datetime.datetime, datetime.date)):
                return obj.isoformat()
            return super(DateTimeEncoder, self).default(obj)
    
    # Convert to JSON with pretty formatting and datetime handling
    return json.dumps(data, indent=2, cls=DateTimeEncoder, ensure_ascii=False)

def export_to_html(data_frame: pd.DataFrame, title: str = "Exported Data") -> str:
    """
    Export data to HTML format.
    
    Args:
        data_frame: Pandas DataFrame to export
        title: Title for the HTML report
        
    Returns:
        HTML string
    """
    # Check if DataFrame is empty
    if data_frame.empty:
        return "<html><body><h1>No data to export</h1></body></html>"
    
    # Use pandas to_html method with some styling
    html_table = data_frame.to_html(classes='table table-striped', index=False)
    
    html_content = f"""
    <html>
    <head>
        <title>{title}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .table {{ border-collapse: collapse; width: 100%; margin-top: 20px; }}
            .table-striped tbody tr:nth-of-type(odd) {{ background-color: rgba(0,0,0,.05); }}
            .table th, .table td {{ padding: 8px; border: 1px solid #dee2e6; }}
            .table thead th {{ vertical-align: bottom; border-bottom: 2px solid #dee2e6; }}
            h1 {{ color: #333; }}
            .footer {{ margin-top: 20px; font-size: 12px; color: #777; }}
        </style>
    </head>
    <body>
        <h1>{title}</h1>
        <p>Generated on: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
        {html_table}
        <div class="footer">
            <p>Generated by OSINT Toolbox</p>
        </div>
    </body>
    </html>
    """
    
    return html_content

def export_to_text(data: Union[Dict, List, pd.DataFrame], title: str = "Exported Data") -> str:
    """
    Export data to plain text format.
    
    Args:
        data: Data to export (DataFrame, dict, or list)
        title: Title for the text report
        
    Returns:
        Text string
    """
    text_buffer = io.StringIO()
    
    # Add title and timestamp
    text_buffer.write(f"{title}\n")
    text_buffer.write(f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    text_buffer.write("=" * 50 + "\n\n")
    
    # Handle different data types
    if isinstance(data, pd.DataFrame):
        if data.empty:
            text_buffer.write("No data to export\n")
        else:
            # Use DataFrame to_string method
            text_buffer.write(data.to_string(index=False))
    
    elif isinstance(data, dict):
        if not data:
            text_buffer.write("No data to export\n")
        else:
            # Format dictionary as key-value pairs
            for key, value in data.items():
                if isinstance(value, dict):
                    text_buffer.write(f"{key}:\n")
                    for sub_key, sub_value in value.items():
                        text_buffer.write(f"  {sub_key}: {sub_value}\n")
                    text_buffer.write("\n")
                elif isinstance(value, list):
                    text_buffer.write(f"{key}:\n")
                    for item in value:
                        text_buffer.write(f"  - {item}\n")
                    text_buffer.write("\n")
                else:
                    text_buffer.write(f"{key}: {value}\n")
    
    elif isinstance(data, list):
        if not data:
            text_buffer.write("No data to export\n")
        else:
            # Format list items
            for i, item in enumerate(data, 1):
                if isinstance(item, dict):
                    text_buffer.write(f"Item {i}:\n")
                    for key, value in item.items():
                        text_buffer.write(f"  {key}: {value}\n")
                    text_buffer.write("\n")
                else:
                    text_buffer.write(f"{i}. {item}\n")
    
    else:
        text_buffer.write(str(data))
    
    # Add footer
    text_buffer.write("\n" + "=" * 50 + "\n")
    text_buffer.write("Generated by OSINT Toolbox\n")
    
    return text_buffer.getvalue()
